/*
Дан массив MxN, заполненный построчно случ. числами от -99 до 99. Этот массив вывести на экран.
Заменить исходный массив новым, в котором удалён первый столбец, содержащий только положительные элементы.
Если требуемого столбца нет, вывести массив без изменений

 */
import java.util.Random;

public class NewArray {
	static int[][] createArray(int sz1, int sz2){ //создает массив заданной размерности,
		//передаём параметры: кол-во строк, кол-во столбцов
		int[][] x = new int[sz1][]; //будущий массив
		int i; //счётчик строк
		for (i = 0; i < x.length; i++)
			x[i] = new int[sz2];
		return x; //возвращаем созданный массив
	}
	static void print(int[][] x) { //выводит элементы массива как матрицу,
		//передаём в параметре массив для вывода
		for (int[] a :x) {
			for (int p:a)
				System.out.printf("%5d", p); //форматированный вывод с отступами
			System.out.println();
		}
	}
	static void randElem(int[][] x) { //заполняет массив заданной размерности рандом. числами от -99 до 99,
		//передаём в параметре "пустой" массив
		Random r = new Random(); //объект рандома
		int i, j; //счётчики, задают строки и столбцы в массиве
		for (i = 0; i < x.length; i++)
			for (j = 0; j < x[i].length; j++)
				x[i][j] = r.nextInt()%100;
	}
	static int positive(int[][] O) { //поиск первого положит. столбца,
		//передаём в параметре массив
		int i, j; //счётчики, задают столбцы и строки в массиве
		for (i = 0; i < O[0].length; i++) { //пробегаемся по кажд. столбцу
			for (j = 0; j < O.length; j++)  
				if (O[j][i] <= 0) //переходим к след. столбцу, если в этом нашли отрицат. число/ноль
					break;
			if (j >= O.length) //завершаем поиск, если нашелся первый положит. столбец
				return (i); //возвращаем индекс положит. столбца
		}
		return(-1); //иначе возвращаем -1
	}
    static void delPos(int[][] O, int pos){ //удаление первого положит. столбца
    	//в параметре передаём исходный массив и номер первого положит. столбца
        int i, j, jo; //счетчики строк, столбца нового и столбца старого
        int[] n; //память под новые массивы, куда будут ссылаться наши строки
        int len = O[0].length - 1; //кол-во столбцов без первого положит.
        for (i = 0; i < O.length; i++) { //цикл заполняет новые массивы, на к-ые ссылаются строки, нужными нам элементами, и 
        	//адресует строкам новые массивы
        	n = new int[len];
        	jo = 0;
        	j = 0;
        	for (; j < pos; j++) {
        		n[j] = O[i][jo];
        		jo++;
        	}
        	jo++; //при заполнении пропускаем удаляемый столбец
        	for (; j < len; j++) {
        		n[j] = O[i][jo];
        		jo++;
        	}
        	O[i] = n;
        }
	}
	public static void main(String[]args) {
		int M = 2, N = 7; //задаём размер массива MxN
		int[][] x = createArray(M, N); //массив заданной размерности
		randElem(x); //заполняем его рандом. числами
		System.out.println("Исходный массив: ");
		print(x); //выводим исх. массив
		System.out.println("Массив без первого положительного столбца: ");
		int pos = positive(x); //номер (индекс) перв. положит. столбца
		if (pos >= 0) //если нашелся положит. столбец - удаляем его и выводим новый массив
			delPos(x, pos);
		print(x); //иначе выводим ещё раз старый массив
	}
}
